name: Setup ngrok and Remote Desktop with Persistent Apps

on:
  workflow_dispatch:

jobs:
  setup-ngrok:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate cache key
        id: cache-key
        run: |
          $date = Get-Date -Format "yyyy-MM-dd"
          $key = "windows-fullcache-$date-${{ github.run_number }}"
          echo "cache-key=$key" >> $env:GITHUB_OUTPUT
          echo "restore-key=windows-fullcache-$date" >> $env:GITHUB_OUTPUT

      - name: Restore cached data
        uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: |
            C:\Windows\Temp\apps-cache
            C:\Windows\Temp\cache
            C:\Users\runneradmin\AppData
            C:\Users\runneradmin\Documents
            C:\Users\runneradmin\Desktop
            C:\Users\runneradmin\Downloads
          key: ${{ steps.cache-key.outputs.cache-key }}
          restore-keys: |
            ${{ steps.cache-key.outputs.restore-key }}
            windows-fullcache-

      - name: Prepare cache directories
        run: |
          New-Item -Path "C:\Windows\Temp\apps-cache" -ItemType Directory -Force
          New-Item -Path "C:\Windows\Temp\cache" -ItemType Directory -Force

      - name: Install Chocolatey if missing
        run: |
          if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }

      - name: Install common applications (persist to cache dir)
        run: |
          # Install Chrome, Firefox, VSCode, Notepad++ into cache dir if missing
          $apps = @("googlechrome","firefox","vscode","notepadplusplus","7zip")
          foreach ($app in $apps) {
            if (!(Test-Path "C:\Windows\Temp\apps-cache\$app.installed")) {
              choco install -y $app --force --params "/D:C:\Windows\Temp\apps-cache\$app"
              New-Item -Path "C:\Windows\Temp\apps-cache\$app.installed" -ItemType File -Force
            } else {
              Write-Host "✅ $app already cached, skipping install"
            }
          }

      - name: Add cached apps to PATH
        run: |
          $env:Path += ";C:\Windows\Temp\apps-cache\googlechrome;C:\Windows\Temp\apps-cache\firefox;C:\Windows\Temp\apps-cache\vscode;C:\Windows\Temp\apps-cache\notepadplusplus;C:\Windows\Temp\apps-cache\7zip"

      - name: Setup browser profiles and cache
        run: |
          # Chrome profile
          $chromeProfile = "C:\Users\runneradmin\AppData\Local\Google\Chrome\User Data\Default"
          if (!(Test-Path $chromeProfile)) {
            New-Item -Path $chromeProfile -ItemType Directory -Force
          }

          # Firefox profile
          $firefoxProfile = "C:\Users\runneradmin\AppData\Roaming\Mozilla\Firefox\Profiles"
          if (!(Test-Path $firefoxProfile)) {
            New-Item -Path $firefoxProfile -ItemType Directory -Force
          }

      - name: Start ngrok TCP tunnel (RDP)
        run: |
          Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
          Expand-Archive ngrok.zip -DestinationPath .
          .\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
          Start-Process -FilePath .\ngrok.exe -ArgumentList "tcp 3389" -WindowStyle Hidden
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: Enable Remote Desktop and set password
        run: |
          Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          $secPass = ConvertTo-SecureString "P@ssw0rd!" -AsPlainText -Force
          Set-LocalUser -Name "runneradmin" -Password $secPass

      - name: Show connection info
        run: |
          Start-Sleep -Seconds 10
          $apiUrl = "http://127.0.0.1:4040/api/tunnels"
          try {
            $response = Invoke-RestMethod -Uri $apiUrl
            $tcpAddr = ($response.tunnels | Where-Object { $_.proto -eq "tcp" }).public_url
            if ($tcpAddr) {
              Write-Output "✅ Connect via: $tcpAddr"
              Write-Output "Username: runneradmin"
              Write-Output "Password: P@ssw0rd!"
            }
          } catch {
            Write-Output "⚠️ Ngrok tunnel not ready"
          }

      - name: Save final cache
        uses: actions/cache/save@v3
        if: always()
        with:
          path: |
            C:\Windows\Temp\apps-cache
            C:\Windows\Temp\cache
            C:\Users\runneradmin\AppData
            C:\Users\runneradmin\Documents
            C:\Users\runneradmin\Desktop
            C:\Users\runneradmin\Downloads
          key: ${{ steps.cache-key.outputs.cache-key }}
