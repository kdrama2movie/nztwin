name: Setup ngrok + RDP + Persistent Portable Apps

on:
  workflow_dispatch:

jobs:
  setup-runner:
    runs-on: windows-latest
    timeout-minutes: 360  # 6 hours max

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate cache key
        id: cache-key
        run: |
          $date = Get-Date -Format "yyyy-MM-dd"
          $key = "windows-portablecache-$date-${{ github.run_number }}"
          echo "cache-key=$key" >> $env:GITHUB_OUTPUT
          echo "restore-key=windows-portablecache-$date" >> $env:GITHUB_OUTPUT

      - name: Restore cached data
        uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: |
            C:\Windows\Temp\apps-cache
            C:\Windows\Temp\cache
            C:\Users\runneradmin\AppData\Local\Google
            C:\Users\runneradmin\AppData\Roaming\Mozilla
            C:\Users\runneradmin\AppData\Roaming\Code
            C:\Users\runneradmin\Documents
            C:\Users\runneradmin\Desktop
            C:\Users\runneradmin\Downloads
          key: ${{ steps.cache-key.outputs.cache-key }}
          restore-keys: |
            ${{ steps.cache-key.outputs.restore-key }}
            windows-portablecache-

      - name: Prepare cache directories
        run: |
          New-Item -Path "C:\Windows\Temp\apps-cache" -ItemType Directory -Force
          New-Item -Path "C:\Windows\Temp\cache" -ItemType Directory -Force

      - name: Install Chocolatey if missing
        run: |
          if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }

      - name: Install portable apps (fast & cached)
        run: |
          $apps = @{
            "VSCode"     = "https://update.code.visualstudio.com/latest/win32-x64-archive/stable"
            "Firefox"    = "https://download.mozilla.org/?product=firefox-latest&os=win64&lang=en-US"
            "NotepadPP"  = "https://github.com/notepad-plus-plus/notepad-plus-plus/releases/download/v8.6.9/npp.8.6.9.portable.zip"
            "7zip"       = "https://www.7-zip.org/a/7za920.zip"
          }
          $cacheRoot = "C:\Windows\Temp\apps-cache"

          foreach ($app in $apps.Keys) {
              $appFolder = Join-Path $cacheRoot $app
              $installedFlag = Join-Path $appFolder "installed.flag"

              if (!(Test-Path $installedFlag)) {
                  New-Item -Path $appFolder -ItemType Directory -Force
                  $zipPath = Join-Path $cacheRoot "$app.zip"

                  if (!(Test-Path $zipPath)) {
                      Invoke-WebRequest $apps[$app] -OutFile $zipPath -MaximumRedirection 5
                  }

                  Expand-Archive -Path $zipPath -DestinationPath $appFolder -Force
                  New-Item -Path $installedFlag -ItemType File
                  Write-Host "‚úÖ $app installed and cached"
              } else {
                  Write-Host "‚úÖ $app already installed, using cache"
              }
          }

      - name: Setup browser profiles
        run: |
          $chromeProfile = "C:\Users\runneradmin\AppData\Local\Google\Chrome\User Data\Default"
          if (!(Test-Path $chromeProfile)) { New-Item -Path $chromeProfile -ItemType Directory -Force }
          $firefoxProfile = "C:\Users\runneradmin\AppData\Roaming\Mozilla\Firefox\Profiles"
          if (!(Test-Path $firefoxProfile)) { New-Item -Path $firefoxProfile -ItemType Directory -Force }

      - name: Download & Setup ngrok
        run: |
          Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
          Expand-Archive ngrok.zip -DestinationPath .
          .\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: Enable Remote Desktop & set password
        run: |
          Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          $secPass = ConvertTo-SecureString "P@ssw0rd!" -AsPlainText -Force
          Set-LocalUser -Name "runneradmin" -Password $secPass

      - name: Start ngrok TCP tunnel
        run: Start-Process -FilePath .\ngrok.exe -ArgumentList "tcp 3389" -WindowStyle Hidden

      - name: Keep runner alive 6 hours + periodic cache
        run: |
          function Save-Cache {
              Write-Host "üíæ Saving cache snapshot..."
              $cacheDir = "C:\Windows\Temp\cache"
              if (Test-Path "C:\Users\runneradmin\AppData\Local\Google") {
                  robocopy "C:\Users\runneradmin\AppData\Local\Google" "$cacheDir\Google" /E /XJ /R:1 /W:1 /MT:8
              }
              if (Test-Path "C:\Users\runneradmin\AppData\Roaming\Mozilla") {
                  robocopy "C:\Users\runneradmin\AppData\Roaming\Mozilla" "$cacheDir\Mozilla" /E /XJ /R:1 /W:1 /MT:8
              }
              if (Test-Path "C:\Users\runneradmin\AppData\Roaming\Code") {
                  robocopy "C:\Users\runneradmin\AppData\Roaming\Code" "$cacheDir\Code" /E /XJ /R:1 /W:1 /MT:8
              }
              Write-Host "‚úÖ Cache saved"
          }

          for ($i = 0; $i -lt 72; $i++) {
              Write-Host "‚è≥ Runner alive: iteration $($i+1)/72 ($(($i*5)) minutes elapsed)"
              if ($i % 6 -eq 0) { Save-Cache }
              Start-Sleep -Seconds 300
          }

          Save-Cache

      - name: Save final cache
        uses: actions/cache/save@v3
        if: always()
        with:
          path: |
            C:\Windows\Temp\apps-cache
            C:\Windows\Temp\cache
            C:\Users\runneradmin\AppData\Local\Google
            C:\Users\runneradmin\AppData\Roaming\Mozilla
            C:\Users\runneradmin\AppData\Roaming\Code
            C:\Users\runneradmin\Documents
            C:\Users\runneradmin\Desktop
            C:\Users\runneradmin\Downloads
          key: ${{ steps.cache-key.outputs.cache-key }}
